<project name="util schema" default="all" basedir=".">
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="/usr/share/java/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<property name="mysql.user" value="root" />
	<property name="mysql.password" value="" />
	<property name="mysql.socket" value="/tmp/mysql.prime.sock" />

	<property name="build.dir" value="build" />
	<property name="dist.dir" value="dist" />
	<property name="tests.dir" value="tests" />
	<property name="sql.mysql_51.output.file" value="common_schema_mysql_51.sql" />
	<property name="sql.innodb_plugin.output.file" value="common_schema_innodb_plugin.sql" />
	<property name="sql.percona_server.output.file" value="common_schema_percona_server.sql" />

	<property name="doc.templates.dir" value="doc/templates" />
	<property name="doc.html.dir" value="doc/html" />

	<target name="all" depends="build">
	</target>

	<target name="build" depends="build_mysql_51, build_innodb_plugin, build_percona_server">
	</target>

	<target name="clean">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<target name="undeploy">
		<antcall target="exec_mysql_command">
			<param name="mysql_command" value="DROP DATABASE IF EXISTS common_schema" />
		</antcall>
	</target>

	<target name="revnumber" description="Get the SVN greatest revision number">
		<mkdir dir="ant-tmp" />
		<exec dir="." executable="svn" output="ant-tmp/svn_output" failifexecutionfails="false" description="Get SVN info for all files recursively">
			<arg value="info" />
			<arg value="--recursive" />
		</exec>
		<exec dir="." executable="awk" input="ant-tmp/svn_output" outputproperty="svn.revision" failifexecutionfails="false" description="Extract highest revision number">
			<arg value="BEGIN {max=0} /Revision:/ {if ($2 > max) max=$2} END {print max}" />
		</exec>
		<condition property="svn.revision" value="0">
			<not>
				<isset property="svn.revision" />
			</not>
		</condition>
		<delete dir="ant-tmp" />
		<tstamp description="To be used as build number" />
		<echo>revision: ${svn.revision}</echo>
	</target>


	<target name="build_mysql_51">
		<mkdir dir="${build.dir}" />
		<concat destfile="${build.dir}/${sql.mysql_51.output.file}">
			<fileset file="main.sql" />

			<fileset dir="tables/" includes="*.sql" />

			<fileset dir="routines/general/" includes="*.sql" />
			<fileset dir="routines/privileges/" includes="*.sql" />
			<fileset dir="routines/text/" includes="*.sql" />
			<fileset dir="routines/time/" includes="*.sql" />

			<fileset dir="views/charsets/" includes="*.sql" />
			<fileset dir="views/data_size/" includes="*.sql" />
			<fileset dir="views/engines/" includes="*.sql" />
			<fileset dir="views/foreign_keys/" includes="*.sql" />
			<fileset dir="views/innodb/" includes="*.sql" />
			<fileset dir="views/keys/" includes="*.sql" />
			<fileset dir="views/privileges_base/" includes="*.sql" />
			<fileset dir="views/privileges/" includes="*.sql" />
			<fileset dir="views/process/" includes="*.sql" />
			<fileset dir="views/status/" includes="*.sql" />
		</concat>
	</target>

	<target name="build_innodb_plugin" depends="build_mysql_51">
		<concat destfile="${build.dir}/${sql.innodb_plugin.output.file}">
			<fileset file="${build.dir}/${sql.mysql_51.output.file}" />
			<fileset dir="views/innodb_plugin/" includes="*.sql" />
		</concat>
	</target>

	<target name="build_percona_server" depends="build_innodb_plugin">
		<concat destfile="${build.dir}/${sql.percona_server.output.file}">
			<fileset file="${build.dir}/${sql.innodb_plugin.output.file}" />
			<fileset dir="views/percona_server/" includes="*.sql" />
		</concat>
	</target>

	<target name="dist" depends="clean, build, revnumber">
		<mkdir dir="${dist.dir}" />
		<antcall target="dist_file">
			<param name="common_schema_sql_file" value="${sql.mysql_51.output.file}" />
		</antcall>
		<antcall target="dist_file">
			<param name="common_schema_sql_file" value="${sql.innodb_plugin.output.file}" />
		</antcall>
		<antcall target="dist_file">
			<param name="common_schema_sql_file" value="${sql.percona_server.output.file}" />
		</antcall>
	</target>

	<target name="dist_file">
		<propertyregex property="release_filename" input="${common_schema_sql_file}" regexp="(.*).sql" select="\1-r${svn.revision}.sql" />
		<copy file="${build.dir}/${common_schema_sql_file}" tofile="${dist.dir}/${release_filename}" />
	</target>

	<target name="deploy_mysql_51" depends="build_mysql_51">
		<antcall target="deploy_file">
			<param name="common_schema_sql_file" value="${build.dir}/${sql.mysql_51.output.file}" />
		</antcall>
	</target>

	<target name="deploy_innodb_plugin" depends="build_innodb_plugin">
		<antcall target="deploy_file">
			<param name="common_schema_sql_file" value="${build.dir}/${sql.innodb_plugin.output.file}" />
		</antcall>
	</target>

	<target name="deploy_percona_server" depends="build_percona_server">
		<antcall target="deploy_file">
			<param name="common_schema_sql_file" value="${build.dir}/${sql.percona_server.output.file}" />
		</antcall>
	</target>

	<target name="deploy_file">
		<echo>
			Deploying file: ${common_schema_sql_file}
		</echo>
		<antcall target="exec_mysql_file">
			<param name="sql_file" value="${common_schema_sql_file}" />
		</antcall>
	</target>

	<target name="exec_mysql_file">
		<echo>
			Executing SQL file: ${sql_file}
		</echo>
		<exec executable="mysql" input="${sql_file}">
			<arg value="--user=${mysql.user}" />
			<arg value="--password=${mysql.password}" />
			<arg value="--socket=${mysql.socket}" />
		</exec>
	</target>

	<target name="exec_mysql_command">
		<echo>
			Executing SQL command: ${mysql_command}
		</echo>
		<exec executable="mysql">
			<arg value="--user=${mysql.user}" />
			<arg value="--password=${mysql.password}" />
			<arg value="--socket=${mysql.socket}" />
			<arg value="--execute=${mysql_command}" />
		</exec>
	</target>

	<target name="doc">
		<copy file="${doc.templates.dir}/style.css" todir="${doc.html.dir}">
		</copy>
		<foreach param="component_doc_filename" target="component_doc">
			<path>
				<fileset dir="${doc.templates.dir}/components">
					<include name="*.html" />
				</fileset>
			</path>
		</foreach>
		<foreach param="generaldoc_filename" target="generaldoc">
			<path>
				<fileset dir="${doc.templates.dir}/general">
					<include name="*.html" />
				</fileset>
			</path>
		</foreach>
		<!--
		<foreach param="routine_group_path" target="routinesdoc">
			<path>
				<dirset dir="${doc.templates.dir}/routines">
			    	<include name="*"/>
				</dirset>
			</path>
		</foreach>
		-->
	</target>
	<target name="component_doc">
		<basename property="doc_basename" file="${component_doc_filename}" />
		<basename property="component_name" file="${component_doc_filename}" suffix=".html" />
		<echo message="Generating documentation for ${component_name} component" />
		<concat destfile="${doc.html.dir}/${doc_basename}">
			<filelist dir="${doc.templates.dir}" files="head.html.template, ${component_doc_filename}, tail.html.template" />
		</concat>
		<replace file="${doc.html.dir}/${doc_basename}" token="pagetitle" value="${component_name}" />
		<replace file="${doc.html.dir}/${doc_basename}" token="pagename" value="${component_name}" />
	</target>
	<target name="generaldoc">
		<basename property="doc_basename" file="${generaldoc_filename}" />
		<basename property="docname" file="${generaldoc_filename}" suffix=".html" />
		<echo message="Generating documentation for ${docname} file" />
		<concat destfile="${doc.html.dir}/${doc_basename}">
			<filelist dir="${doc.templates.dir}" files="head.html.template, ${generaldoc_filename}, tail.html.template" />
		</concat>
		<replace file="${doc.html.dir}/${doc_basename}" token="pagetitle" value="${docname}" />
		<replace file="${doc.html.dir}/${doc_basename}" token="pagename" value="${docname}" />
	</target>
	<target name="routinesdoc">
		<basename property="routine_group_name" file="${routine_group_path}" />
		<propertyregex property="routine_group_name.spaced" input="${routine_group_name}" regexp="_" replace=" ">
		</propertyregex>
		<echo message="Generating documentation for ${routine_group_name}" />
		<concat destfile="${doc.html.dir}/${routine_group_name}.html">
			<filelist dir="${doc.templates.dir}" files="head.html.template" />
			<fileset dir="${doc.templates.dir}/routines/${routine_group_name}">
			</fileset>
			<filelist dir="${doc.templates.dir}/routines" files="routine.tail.html.template" />
			<filelist dir="${doc.templates.dir}" files="tail.html.template" />
		</concat>
		<replace file="${doc.html.dir}/${routine_group_name}.html" token="pagetitle" value="${routine_group_name.spaced}" />
		<replace file="${doc.html.dir}/${routine_group_name}.html" token="pagename" value="${routine_group_name.spaced}" />
	</target>


	<target name="test">
		<echo>Testing</echo>
		<exec executable="bash" dir="${tests.dir}" failonerror="true">
			<arg value="test_all.sh" />
			<arg value="${mysql.user}" />
			<arg value="${mysql.password}" />
			<arg value="${mysql.socket}" />
		</exec>
	</target>
	<target name="__test__">
		<loadfile property="f.c" srcfile="/tmp/crc64.sql">
		</loadfile>
		<echo>prop: ${f.c}</echo>
		<propertyregex property="f.c2" input="${f.c}" regexp="@desc (.*)" select="\1">
		</propertyregex>
		<echo>prop2: ---${f.c2}---</echo>
	</target>
</project>