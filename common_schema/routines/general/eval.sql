--
-- Evaluates the queries generated by a given query.
-- Given query is expected to be a SQL generating query. That is, it is expected to produce,
-- when invoked, a single text column consisting of SQL queries (one query per row).
-- The eval() procedure will invoke said query, and then invoke (evaluate) any of the resulting queries.
-- Invoker of this procedure must have the CREATE TEMPORARY TABLES privilege, as well as any privilege 
-- required for evaluating implied queries.
-- 
-- Example:
--
-- CALL eval('select concat(\'KILL \',id) from information_schema.processlist where user=\'unwanted\'');
--

DELIMITER $$

DROP PROCEDURE IF EXISTS eval $$
CREATE PROCEDURE eval(sql_query TEXT CHARSET utf8) 
MODIFIES SQL DATA
SQL SECURITY INVOKER
COMMENT 'Evaluates queries resulting from given query'

BEGIN
  DROP TEMPORARY TABLE IF EXISTS _tmp_eval_queries;
  CREATE TEMPORARY TABLE _tmp_eval_queries (query TEXT CHARSET utf8);
  SET @q := CONCAT('INSERT INTO _tmp_eval_queries ', sql_query);  
  PREPARE st FROM @q;
  EXECUTE st;
  DEALLOCATE PREPARE st;
  
  BEGIN	
	DECLARE current_query TEXT CHARSET utf8 DEFAULT NULL;
    DECLARE done INT DEFAULT 0;
    DECLARE eval_cursor CURSOR FOR SELECT query FROM _tmp_eval_queries;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    
    OPEN eval_cursor;
    read_loop: LOOP
      FETCH eval_cursor INTO current_query;
      IF done THEN
        LEAVE read_loop;
      END IF;
      SET @execute_query := current_query;
      IF @common_schema_verbose THEN
	      SELECT @execute_query AS now_executing FROM DUAL;
	  END IF;
      PREPARE st FROM @execute_query;
      EXECUTE st;
      DEALLOCATE PREPARE st;
    END LOOP;

    CLOSE eval_cursor;
  END;
  
  DROP TEMPORARY TABLE IF EXISTS _tmp_eval_queries;
END $$

DELIMITER ;
